Index: drivers/gpu/drm/tiny/Kconfig
===================================================================
--- a/drivers/gpu/drm/tiny/Kconfig
+++ b/drivers/gpu/drm/tiny/Kconfig
@@ -213,3 +213,17 @@ config TINYDRM_ST7735R
 	  * Okaya RH128128T 1.44" 128x128 TFT
 
 	  If M is selected the module will be called st7735r.
+
+config TINYDRM_ST7735S
+	tristate "DRM support for Sitronix ST7735S display panels"
+	depends on DRM && SPI
+	select DRM_KMS_HELPER
+	select DRM_GEM_DMA_HELPER
+	select DRM_MIPI_DBI
+	select BACKLIGHT_CLASS_DEVICE
+	help
+	  DRM driver for Sitronix ST7735S with one of the following
+	  LCDs:
+	  * Generic ST7735S 128x128 Color TFT
+
+	  If M is selected the module will be called st7735s.
Index: drivers/gpu/drm/tiny/Makefile
===================================================================
--- a/drivers/gpu/drm/tiny/Makefile
+++ b/drivers/gpu/drm/tiny/Makefile
@@ -16,3 +16,4 @@ obj-$(CONFIG_TINYDRM_MI0283QT)		+= mi028
 obj-$(CONFIG_TINYDRM_REPAPER)		+= repaper.o
 obj-$(CONFIG_TINYDRM_ST7586)		+= st7586.o
 obj-$(CONFIG_TINYDRM_ST7735R)		+= st7735r.o
+obj-$(CONFIG_TINYDRM_ST7735S)		+= st7735s.o
Index: drivers/gpu/drm/tiny/st7735s.c
===================================================================
--- a/drivers/gpu/drm/tiny/st7735s.c
+++ b/drivers/gpu/drm/tiny/st7735s.c
@@ -0,0 +1,223 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * DRM driver for Sitronix ST7735S / GalaxyCore GC9106 display controller
+ * 
+ * Adapted for GC9106 128x128 panels commonly mislabeled as ST7735S
+ */
+
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/property.h>
+#include <linux/spi/spi.h>
+#include <video/mipi_display.h>
+
+#include <drm/drm_atomic_helper.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_fbdev_dma.h>
+#include <drm/drm_gem_atomic_helper.h>
+#include <drm/drm_gem_dma_helper.h>
+#include <drm/drm_managed.h>
+#include <drm/drm_mipi_dbi.h>
+
+#define ST7735S_MY		BIT(7)
+#define ST7735S_MX		BIT(6)
+#define ST7735S_MV		BIT(5)
+#define ST7735S_RGB		BIT(3)
+
+struct st7735s_cfg {
+	const struct drm_display_mode mode;
+	unsigned int left_offset;
+	unsigned int top_offset;
+	unsigned int write_only:1;
+	unsigned int rgb:1;
+};
+
+struct st7735s_priv {
+	struct mipi_dbi_dev dbidev;
+	const struct st7735s_cfg *cfg;
+};
+
+static void st7735s_pipe_enable(struct drm_simple_display_pipe *pipe,
+                struct drm_crtc_state *crtc_state,
+                struct drm_plane_state *plane_state)
+{
+   struct mipi_dbi_dev *dbidev = drm_to_mipi_dbi_dev(pipe->crtc.dev);
+   struct mipi_dbi *dbi = &dbidev->dbi;
+   int ret, idx;
+
+   if (!drm_dev_enter(pipe->crtc.dev, &idx))
+       return;
+
+   DRM_DEBUG_KMS("\n");
+
+   ret = mipi_dbi_poweron_reset(dbidev);
+   if (ret)
+       goto out_exit;
+
+   msleep(120);
+
+   mipi_dbi_command(dbi, 0xB1, 0x05, 0x3C, 0x3C);
+   mipi_dbi_command(dbi, 0xB2, 0x05, 0x3C, 0x3C);
+   mipi_dbi_command(dbi, 0xB3, 0x05, 0x3C, 0x3C, 0x05, 0x3C, 0x3C);
+   mipi_dbi_command(dbi, 0xB4, 0x03);
+   mipi_dbi_command(dbi, 0xC0, 0x0E, 0x0E, 0x04);
+   mipi_dbi_command(dbi, 0xC1, 0xC0);
+   mipi_dbi_command(dbi, 0xC2, 0x0D, 0x00);
+   mipi_dbi_command(dbi, 0xC3, 0x8D, 0x2A);
+   mipi_dbi_command(dbi, 0xC4, 0x8D, 0xEE);
+   mipi_dbi_command(dbi, 0xC5, 0x0C);
+   mipi_dbi_command(dbi, MIPI_DCS_SET_ADDRESS_MODE, 0xD8);
+   mipi_dbi_command(dbi, 0xE0, 0x0C, 0x1C, 0x0F, 0x18, 0x36, 0x2F, 0x27, 0x2A,
+            0x27, 0x25, 0x2D, 0x3C, 0x00, 0x05, 0x03, 0x10);
+   mipi_dbi_command(dbi, 0xE1, 0x0C, 0x1A, 0x09, 0x09, 0x26, 0x22, 0x1E, 0x25,
+            0x25, 0x25, 0x2E, 0x3B, 0x00, 0x05, 0x03, 0x10);
+   mipi_dbi_command(dbi, MIPI_DCS_SET_PIXEL_FORMAT, MIPI_DCS_PIXEL_FMT_16BIT);
+   mipi_dbi_command(dbi, MIPI_DCS_EXIT_SLEEP_MODE);
+   msleep(120);
+   mipi_dbi_command(dbi, MIPI_DCS_SET_DISPLAY_ON);
+   msleep(20);
+
+   mipi_dbi_enable_flush(dbidev, crtc_state, plane_state);
+
+out_exit:
+   drm_dev_exit(idx);
+}
+
+
+static const struct drm_simple_display_pipe_funcs st7735s_pipe_funcs = {
+	DRM_MIPI_DBI_SIMPLE_DISPLAY_PIPE_FUNCS(st7735s_pipe_enable),
+};
+
+static const struct st7735s_cfg mf68e_128x128_cfg = {
+	.mode = { DRM_SIMPLE_MODE(128, 128, 25, 26) },
+	.left_offset = 0,
+	.top_offset = 32,
+	.write_only = true,
+	.rgb = true,
+};
+
+DEFINE_DRM_GEM_DMA_FOPS(st7735s_fops);
+
+static const struct drm_driver st7735s_driver = {
+	.driver_features = DRIVER_GEM | DRIVER_MODESET | DRIVER_ATOMIC,
+	.fops = &st7735s_fops,
+	DRM_GEM_DMA_DRIVER_OPS_VMAP,
+	.debugfs_init = mipi_dbi_debugfs_init,
+	.name = "st7735s",
+	.desc = "Sitronix ST7735S / GC9106",
+	.date = "20231012",
+	.major = 1,
+	.minor = 0,
+};
+
+static const struct of_device_id st7735s_of_match[] = {
+	{ .compatible = "sitronix,st7735s", .data = &mf68e_128x128_cfg },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, st7735s_of_match);
+
+static const struct spi_device_id st7735s_id[] = {
+	{ "st7735s", (uintptr_t)&mf68e_128x128_cfg },
+	{ },
+};
+MODULE_DEVICE_TABLE(spi, st7735s_id);
+
+static int st7735s_probe(struct spi_device *spi)
+{
+	struct device *dev = &spi->dev;
+	const struct st7735s_cfg *cfg;
+	struct mipi_dbi_dev *dbidev;
+	struct st7735s_priv *priv;
+	struct drm_device *drm;
+	struct mipi_dbi *dbi;
+	struct gpio_desc *dc;
+	u32 rotation = 0;
+	int ret;
+
+	cfg = device_get_match_data(&spi->dev);
+	if (!cfg)
+		cfg = (void *)spi_get_device_id(spi)->driver_data;
+
+	priv = devm_drm_dev_alloc(dev, &st7735s_driver, struct st7735s_priv, dbidev.drm);
+	if (IS_ERR(priv))
+		return PTR_ERR(priv);
+
+	dbidev = &priv->dbidev;
+	priv->cfg = cfg;
+	dbi = &dbidev->dbi;
+	drm = &dbidev->drm;
+
+	dbi->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(dbi->reset))
+		return dev_err_probe(dev, PTR_ERR(dbi->reset), "Failed to get GPIO 'reset'\n");
+
+	dc = devm_gpiod_get(dev, "dc", GPIOD_OUT_LOW);
+	if (IS_ERR(dc))
+		return dev_err_probe(dev, PTR_ERR(dc), "Failed to get GPIO 'dc'\n");
+
+	dbidev->backlight = devm_of_find_backlight(dev);
+	if (IS_ERR(dbidev->backlight))
+		return PTR_ERR(dbidev->backlight);
+
+	dbidev->regulator = devm_regulator_get_optional(dev, "power");
+	if (IS_ERR(dbidev->regulator))
+		dbidev->regulator = NULL;
+
+	device_property_read_u32(dev, "rotation", &rotation);
+
+	ret = mipi_dbi_spi_init(spi, dbi, dc);
+	if (ret)
+		return ret;
+
+	if (cfg->write_only)
+		dbi->read_commands = NULL;
+
+	dbidev->left_offset = cfg->left_offset;
+	dbidev->top_offset = cfg->top_offset;
+
+	ret = mipi_dbi_dev_init(dbidev, &st7735s_pipe_funcs, &cfg->mode, rotation);
+	if (ret)
+		return ret;
+
+	drm_mode_config_reset(drm);
+
+	ret = drm_dev_register(drm, 0);
+	if (ret)
+		return ret;
+
+	spi_set_drvdata(spi, drm);
+
+	drm_fbdev_dma_setup(drm, 16);
+
+	return 0;
+}
+
+static void st7735s_remove(struct spi_device *spi)
+{
+	struct drm_device *drm = spi_get_drvdata(spi);
+	drm_dev_unplug(drm);
+	drm_atomic_helper_shutdown(drm);
+}
+
+static void st7735s_shutdown(struct spi_device *spi)
+{
+	drm_atomic_helper_shutdown(spi_get_drvdata(spi));
+}
+
+static struct spi_driver st7735s_spi_driver = {
+	.driver = {
+		.name = "st7735s",
+		.of_match_table = st7735s_of_match,
+	},
+	.id_table = st7735s_id,
+	.probe = st7735s_probe,
+	.remove = st7735s_remove,
+	.shutdown = st7735s_shutdown,
+};
+module_spi_driver(st7735s_spi_driver);
+
+MODULE_DESCRIPTION("Sitronix ST7735S DRM driver for MSM8916");
+MODULE_AUTHOR("Stefan x Nilsson <stefan.x.nilsson@axis.com>");
+MODULE_LICENSE("GPL");
